/**
 * MappingMapToEPSupport.java
 *
 * This file was generated by MapForce 2015r4sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapToEPSupport extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_MSCMSDATAFlex_Instance;
		java.lang.String var2_input;
	
		public main(com.altova.mapforce.IMFNode var1_MSCMSDATAFlex_Instance, java.lang.String var2_input)
		{
			this.var1_MSCMSDATAFlex_Instance = var1_MSCMSDATAFlex_Instance;
			this.var2_input = var2_input;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = (com.altova.db.Record)com.altova.functions.Core.first((new seq1_NewRecord(closure.var2_input, closure.var1_MSCMSDATAFlex_Instance)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_NewRecord implements IEnumerable
	{
		java.lang.String var1_input;
		com.altova.mapforce.IMFNode var2_MSCMSDATAFlex_Instance;
	
		public seq1_NewRecord(java.lang.String var1_input, com.altova.mapforce.IMFNode var2_MSCMSDATAFlex_Instance)
		{
			this.var1_input = var1_input;
			this.var2_MSCMSDATAFlex_Instance = var2_MSCMSDATAFlex_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_NewRecord closure;
			com.altova.db.Record var3_NewRecord;
			com.altova.mapforce.IEnumerable var4_filter_elements_nodename;
			public Enumerator(seq1_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_NewRecord = com.altova.db.Dbs.newRecord();
				var4_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Root", closure.var2_MSCMSDATAFlex_Instance));
				com.altova.db.Dbs.addChildren(var3_NewRecord, "dbo.MSMS_TXTDATA|0", (new seq2_cond_join(closure.var1_input, var4_filter_elements_nodename)));
				current = var3_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_cond_join implements IEnumerable
	{
		java.lang.String var1_input;
		com.altova.mapforce.IEnumerable var2_shared;
	
		public seq2_cond_join(java.lang.String var1_input, com.altova.mapforce.IEnumerable var2_shared)
		{
			this.var1_input = var1_input;
			this.var2_shared = var2_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_cond_join closure;
			IEnumerator var3_filter_elements_nodename;
			IEnumerator var4_filter_elements_nodename;
			IEnumerator var5_filter_elements_nodename;
			IEnumerator var6_filter_elements_nodename;
			com.altova.db.Record var7_NewRecord;
			com.altova.mapforce.IEnumerable var8_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var9_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var10_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var11_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var12_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var13_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var14_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var15_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var16_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var17_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var18_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var19_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var20_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var21_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var22_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var23_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var24_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var25_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var26_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var27_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var28_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var29_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var30_filter_elements_nodename;
			public Enumerator(seq2_cond_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 3;				
				if (!(com.altova.functions.Core.exists(closure.var2_shared))) {state = 0; return false; }
				var3_filter_elements_nodename = (com.altova.functions.Core.filterElements("Split once", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var2_shared))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var3_filter_elements_nodename.moveNext()) {state = 4; return false; }
				var4_filter_elements_nodename = (com.altova.functions.Core.filterElements("Repeated split", ((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null;
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!var4_filter_elements_nodename.moveNext()) {state = 6; return false; }
				var5_filter_elements_nodename = (com.altova.functions.Core.filterElements("Values", ((com.altova.mapforce.IMFNode)(var4_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null;
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				if (!var5_filter_elements_nodename.moveNext()) {state = 8; return false; }
				var6_filter_elements_nodename = (com.altova.functions.Core.filterElements("SKULINES", ((com.altova.mapforce.IMFNode)(var5_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 5;				
				var5_filter_elements_nodename.close(); var5_filter_elements_nodename = null;
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var6_filter_elements_nodename.moveNext()) {state = 10; return false; }
				var7_NewRecord = com.altova.db.Dbs.newRecord();
				var8_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field18", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var9_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field23", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var10_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field2", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var11_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field3", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var12_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field4", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var13_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field6", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var14_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field17", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var15_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field9", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var16_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field11", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var17_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field8", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var18_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field12", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var19_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field19", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var20_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field14", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var21_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field5", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var22_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field15", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var23_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field7", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var24_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field10", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var25_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Header", ((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current()))));
				var26_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field21", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var27_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field20", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var28_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field13", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var29_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field22", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				var30_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Field16", ((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))));
				com.altova.db.Dbs.writeField(var7_NewRecord, "contract", (new seq3_cond_box(var10_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "upc", (new seq4_cond_box(var11_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "packing_ref", (new seq5_cond_box(var12_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "action", (new seq6_cond_box(var21_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "season", (new seq7_cond_box(var13_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "dept", (new seq8_cond_box(var23_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "contract_status", (new seq9_cond_box(var17_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "stroke_num", (new seq10_cond_box(var15_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "stroke_desc", (new seq11_cond_box(var24_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "colour_code", (new seq12_cond_box(var16_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "colour_desc", (new seq13_cond_box(var18_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "prim_size", (new seq14_cond_box(var28_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "sec_size", (new seq15_cond_box(var20_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "price", (new seq16_cond_box(var22_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "series", (new seq17_cond_box(var30_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "country", (new seq18_cond_box(var14_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "care_label_ref", (new seq19_cond_box(var8_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "multi_part_set", (new seq20_cond_box(var19_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "fibre_content", (new seq21_cond_box(var27_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "story_desc", (new seq22_cond_box(var26_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "product_desc", (new seq23_cond_box(var29_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "foot_fibre_ref", (new seq24_cond_box(var9_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "batch_date", (new seq25_map(var25_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "batch_time", (new seq27_map(var25_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "record_count", (new seq29_map(var25_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "job_num", (new seq31_map(var25_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var7_NewRecord, "file_type", com.altova.functions.Core.box(closure.var1_input));
				com.altova.db.Dbs.writeField(var7_NewRecord, "rowUpdate", com.altova.functions.Core.box(com.altova.functions.Lang.now()));
				current = var7_NewRecord;
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 7;				
				var6_filter_elements_nodename.close(); var6_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var6_filter_elements_nodename.close(); var6_filter_elements_nodename = null;
				var5_filter_elements_nodename.close(); var5_filter_elements_nodename = null;
				var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null;
				var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq3_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_cond_box closure;
			public Enumerator(seq3_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq4_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_cond_box closure;
			public Enumerator(seq4_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq5_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_cond_box closure;
			public Enumerator(seq5_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq6_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_cond_box closure;
			public Enumerator(seq6_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq7_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_cond_box closure;
			public Enumerator(seq7_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq8_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_cond_box closure;
			public Enumerator(seq8_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq9_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_cond_box closure;
			public Enumerator(seq9_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq10_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_cond_box closure;
			public Enumerator(seq10_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq11_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_cond_box closure;
			public Enumerator(seq11_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq12_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_cond_box closure;
			public Enumerator(seq12_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq13_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_cond_box closure;
			public Enumerator(seq13_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq14_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_cond_box closure;
			public Enumerator(seq14_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq15_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_cond_box closure;
			public Enumerator(seq15_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq16_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_cond_box closure;
			public Enumerator(seq16_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq17_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_cond_box closure;
			public Enumerator(seq17_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq18_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_cond_box closure;
			public Enumerator(seq18_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq19_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_cond_box closure;
			public Enumerator(seq19_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq20_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq20_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq20_cond_box closure;
			public Enumerator(seq20_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq21_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq21_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq21_cond_box closure;
			public Enumerator(seq21_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq22_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq22_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq22_cond_box closure;
			public Enumerator(seq22_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq23_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq23_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq23_cond_box closure;
			public Enumerator(seq23_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq24_cond_box implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq24_cond_box(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq24_cond_box closure;
			public Enumerator(seq24_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_shared))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_shared));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq25_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq25_map(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq25_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq25_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq26_filter(closure.var1_shared))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("Field2", ((com.altova.mapforce.IMFNode)(var2_filter.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq26_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq26_filter(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq26_filter closure;
			IEnumerator var2_shared;
			public Enumerator(seq26_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_shared = (closure.var1_shared).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_shared.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("Field2", ((com.altova.mapforce.IMFNode)(var2_shared.current())))))) {state = 2; return false; }
				current = var2_shared.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_shared.close(); var2_shared = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_shared.close(); var2_shared = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq27_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq27_map(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq27_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq27_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq28_filter(closure.var1_shared))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("Field3", ((com.altova.mapforce.IMFNode)(var2_filter.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq28_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq28_filter(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq28_filter closure;
			IEnumerator var2_shared;
			public Enumerator(seq28_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_shared = (closure.var1_shared).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_shared.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("Field3", ((com.altova.mapforce.IMFNode)(var2_shared.current())))))) {state = 2; return false; }
				current = var2_shared.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_shared.close(); var2_shared = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_shared.close(); var2_shared = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq29_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq29_map(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq29_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq29_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq30_filter(closure.var1_shared))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("Field4", ((com.altova.mapforce.IMFNode)(var2_filter.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq30_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq30_filter(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq30_filter closure;
			IEnumerator var2_shared;
			public Enumerator(seq30_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_shared = (closure.var1_shared).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_shared.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("Field4", ((com.altova.mapforce.IMFNode)(var2_shared.current())))))) {state = 2; return false; }
				current = var2_shared.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_shared.close(); var2_shared = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_shared.close(); var2_shared = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq31_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq31_map(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq31_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq31_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq32_filter(closure.var1_shared))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("Field5", ((com.altova.mapforce.IMFNode)(var2_filter.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq32_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq32_filter(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq32_filter closure;
			IEnumerator var2_shared;
			public Enumerator(seq32_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_shared = (closure.var1_shared).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_shared.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("Field5", ((com.altova.mapforce.IMFNode)(var2_shared.current())))))) {state = 2; return false; }
				current = var2_shared.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_shared.close(); var2_shared = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_shared.close(); var2_shared = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_MSCMSDATAFlex_Instance;
		java.lang.String var2_input;
	
		public Outer(com.altova.mapforce.IMFNode var1_MSCMSDATAFlex_Instance, java.lang.String var2_input)
		{
			this.var1_MSCMSDATAFlex_Instance = var1_MSCMSDATAFlex_Instance;
			this.var2_input = var2_input;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var3_box;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_box = ((new main(closure.var1_MSCMSDATAFlex_Instance, closure.var2_input))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_box.moveNext()) {state = 3; return false; }
				current = var3_box.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_box.close(); var3_box = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_box.close(); var3_box = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected com.altova.text.ITextNode varMSCMSDATAFlex2Instance;
	protected String varinput;
		com.altova.db.TransactionHelper transactionHelper;

	public void run(String MSCMSDATAFlex2SourceFilename, String inputSourceParameter, java.sql.Connection EPSupportTargetConnection) throws Exception {
		// open source streams
		writeTrace("Loading " + MSCMSDATAFlex2SourceFilename + "...\n");
		com.altova.io.FileInput MSCMSDATAFlex2Source = new com.altova.io.FileInput(MSCMSDATAFlex2SourceFilename);

		// run
	
		run(MSCMSDATAFlex2Source, inputSourceParameter, EPSupportTargetConnection);

		// close source streams
		MSCMSDATAFlex2Source.close();
	}


	// main entry point

	public void run(com.altova.io.Input MSCMSDATAFlex2Source, String inputSourceParameter, java.sql.Connection EPSupportTargetConnection) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.mapforce.MSCMSDATAFlex.MSCMSDATAFlexDocument MSCMSDATAFlex2Document = new com.mapforce.MSCMSDATAFlex.MSCMSDATAFlexDocument();
		MSCMSDATAFlex2Document.setEncoding( "windows-1252", false, false );
		MSCMSDATAFlex2Document.parse(MSCMSDATAFlex2Source);
		varMSCMSDATAFlex2Instance = MSCMSDATAFlex2Document.getGenerator();
	
		if (runDoesCloseAll)
			MSCMSDATAFlex2Source.close();
			varinput = inputSourceParameter;


		// Create the target

		writeTrace("Connecting to EPSupport database...\n");
		{

		// Execute mapping

		main mapping = new main(new com.altova.text.TextDocumentAsMFNodeAdapter(varMSCMSDATAFlex2Instance, MSCMSDATAFlex2Source.getFilename()), inputSourceParameter);

		writeDB(mapping, new com.altova.db.Catalog(EPSupportTargetConnection, 60, true));
		// Close the target
		}

		writeTrace("Closing " + EPSupportTargetConnection + ".\n");
		EPSupportTargetConnection.close();

		
		if (runDoesCloseAll)
		{
			MSCMSDATAFlex2Source.close();
		}
	}


		static class Setup
		{
	static class main implements IEnumerable
	{
		com.altova.db.Catalog var1_catalog;
	
		public main(com.altova.db.Catalog var1_catalog)
		{
			this.var1_catalog = var1_catalog;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			main closure;
			com.altova.db.Statement var2_NewStatement;
			com.altova.db.Statement var3_NewStatement;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_catalog, 1, "INSERT INTO [dbo].[MSMS_TXTDATA] ([contract], [upc], [packing_ref], [action], [season], [dept], [contract_status], [stroke_num], [stroke_desc], [colour_code], [colour_desc], [prim_size], [sec_size], ["
 + "price], [series], [country], [care_label_ref], [multi_part_set], [fibre_content], [story_desc], [product_desc], [foot_fibre_ref], [batch_date], [batch_time], [record_count], [job_num], [file_type], [r"
 + "owUpdate]) VALUES ((CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar"
 + "(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CA"
 + "ST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nva"
 + "rchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), (CAST(? AS nvarchar(50))), ?)");
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.TIMESTAMP,-1);
				com.altova.db.Dbs.prepareStatement(var2_NewStatement);
				var3_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_catalog, 2, "UPDATE [dbo].[MSMS_TXTDATA] SET [action] = (CAST(? AS nvarchar(50))), [contract_status] = (CAST(? AS nvarchar(50))), [colour_code] = (CAST(? AS nvarchar(50))), [colour_desc] = (CAST(? AS nvarchar(50))"
 + "), [prim_size] = (CAST(? AS nvarchar(50))), [sec_size] = (CAST(? AS nvarchar(50))), [price] = (CAST(? AS nvarchar(50))), [series] = (CAST(? AS nvarchar(50))), [country] = (CAST(? AS nvarchar(50))), [c"
 + "are_label_ref] = (CAST(? AS nvarchar(50))), [multi_part_set] = (CAST(? AS nvarchar(50))), [fibre_content] = (CAST(? AS nvarchar(50))), [story_desc] = (CAST(? AS nvarchar(50))), [product_desc] = (CAST("
 + "? AS nvarchar(50))), [foot_fibre_ref] = (CAST(? AS nvarchar(50))), [batch_date] = (CAST(? AS nvarchar(50))), [batch_time] = (CAST(? AS nvarchar(50))), [record_count] = (CAST(? AS nvarchar(50))), [job_"
 + "num] = (CAST(? AS nvarchar(50))), [rowUpdate] = ? WHERE ([dbo].[MSMS_TXTDATA].[contract]=(CAST(? AS nvarchar(50)))) AND ([dbo].[MSMS_TXTDATA].[upc]=(CAST(? AS nvarchar(50)))) AND ([dbo].[MSMS_TXTDATA]"
 + ".[packing_ref]=(CAST(? AS nvarchar(50)))) AND ([dbo].[MSMS_TXTDATA].[season]=(CAST(? AS nvarchar(50)))) AND ([dbo].[MSMS_TXTDATA].[dept]=(CAST(? AS nvarchar(50)))) AND ([dbo].[MSMS_TXTDATA].[stroke_nu"
 + "m]=(CAST(? AS nvarchar(50)))) AND ([dbo].[MSMS_TXTDATA].[stroke_desc]=(CAST(? AS nvarchar(50)))) AND ([dbo].[MSMS_TXTDATA].[file_type]=(CAST(? AS nvarchar(50))))");
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.TIMESTAMP,-1);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.VARCHAR,50);
				com.altova.db.Dbs.prepareStatement(var3_NewStatement);
				return false;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class main_lambda implements com.altova.mapforce.SequenceFactory
	{
		public main_lambda() {}
		
		public Object invoke(Object o) { return new main((com.altova.db.Catalog) o); }	
	}
	
		}

		static void writeDB(com.altova.mapforce.IEnumerable mapping, com.altova.db.Catalog target) throws Exception
		{
			IEnumerator mappingEnumerator = mapping.enumerator();
			mappingEnumerator.moveNext();
			com.altova.db.Record record = (com.altova.db.Record) mappingEnumerator.current();

			Setup.main setup = 
				new Setup.main(target);
			setup.enumerator().moveNext();

			com.altova.db.TransactionHelper transactionHelper = 
				new com.altova.db.TransactionHelper(
					target.getConnection(), 
					"BEGIN TRANSACTION", 
					"COMMIT TRANSACTION", 
					"ROLLBACK TRANSACTION", 
					"SAVE TRANSACTION  %%TRANSACTION_NAME%% ", 
					"ROLLBACK TRANSACTION  %%TRANSACTION_NAME%% "
				);

					IEnumerator MSMS_TXTDATA_en = record.children.get("dbo.MSMS_TXTDATA|0").enumerator();
					while(MSMS_TXTDATA_en.moveNext())
						writeDB_MSMS_TXTDATA(record, (com.altova.db.Record) MSMS_TXTDATA_en.current(), target, transactionHelper);				

		}

			static class Action_MSMS_TXTDATA
			{
	static class main implements IEnumerable
	{
		com.altova.db.Catalog var1_catalog;
		com.altova.db.Record var2_record;
	
		public main(com.altova.db.Catalog var1_catalog, com.altova.db.Record var2_record)
		{
			this.var1_catalog = var1_catalog;
			this.var2_record = var2_record;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			main closure;
			com.altova.db.Statement var3_NewQuery;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 33:	if (moveNext_33()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 37:	if (moveNext_37()) return true; break;
					case 38:	if (moveNext_38()) return true; break;
					case 39:	if (moveNext_39()) return true; break;
					case 40:	if (moveNext_40()) return true; break;
					case 41:	if (moveNext_41()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 43:	if (moveNext_43()) return true; break;
					case 44:	if (moveNext_44()) return true; break;
					case 45:	if (moveNext_45()) return true; break;
					case 46:	if (moveNext_46()) return true; break;
					case 47:	if (moveNext_47()) return true; break;
					case 48:	if (moveNext_48()) return true; break;
					case 49:	if (moveNext_49()) return true; break;
					case 50:	if (moveNext_50()) return true; break;
					case 51:	if (moveNext_51()) return true; break;
					case 52:	if (moveNext_52()) return true; break;
					case 53:	if (moveNext_53()) return true; break;
					case 54:	if (moveNext_54()) return true; break;
					case 55:	if (moveNext_55()) return true; break;
					case 56:	if (moveNext_56()) return true; break;
					case 57:	if (moveNext_57()) return true; break;
					case 58:	if (moveNext_58()) return true; break;
					case 59:	if (moveNext_59()) return true; break;
					case 60:	if (moveNext_60()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq1_NewQuery(closure.var1_catalog, closure.var2_record))))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 6;				
				var3_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_catalog, 1);
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "contract")))) {state = 5; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "contract")));
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "upc")))) {state = 7; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "upc")));
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 10;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "packing_ref")))) {state = 9; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "packing_ref")));
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 10;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 12;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "action")))) {state = 11; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "action")));
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 12;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 14;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "season")))) {state = 13; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "season")));
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 14;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 16;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "dept")))) {state = 15; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "dept")));
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 16;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 18;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "contract_status")))) {state = 17; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "contract_status")));
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 18;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 20;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "stroke_num")))) {state = 19; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "stroke_num")));
				return false;
			}
			private boolean moveNext_19() throws Exception {
				state = 20;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 22;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "stroke_desc")))) {state = 21; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "stroke_desc")));
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 22;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 24;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "colour_code")))) {state = 23; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "colour_code")));
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 24;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 26;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "colour_desc")))) {state = 25; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "colour_desc")));
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 26;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 28;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "prim_size")))) {state = 27; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "prim_size")));
				return false;
			}
			private boolean moveNext_27() throws Exception {
				state = 28;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 30;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "sec_size")))) {state = 29; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "sec_size")));
				return false;
			}
			private boolean moveNext_29() throws Exception {
				state = 30;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 32;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "price")))) {state = 31; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "price")));
				return false;
			}
			private boolean moveNext_31() throws Exception {
				state = 32;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 34;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "series")))) {state = 33; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "series")));
				return false;
			}
			private boolean moveNext_33() throws Exception {
				state = 34;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_34() throws Exception {
				state = 36;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "country")))) {state = 35; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "country")));
				return false;
			}
			private boolean moveNext_35() throws Exception {
				state = 36;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_36() throws Exception {
				state = 38;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "care_label_ref")))) {state = 37; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "care_label_ref")));
				return false;
			}
			private boolean moveNext_37() throws Exception {
				state = 38;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_38() throws Exception {
				state = 40;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "multi_part_set")))) {state = 39; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "multi_part_set")));
				return false;
			}
			private boolean moveNext_39() throws Exception {
				state = 40;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_40() throws Exception {
				state = 42;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "fibre_content")))) {state = 41; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "fibre_content")));
				return false;
			}
			private boolean moveNext_41() throws Exception {
				state = 42;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_42() throws Exception {
				state = 44;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "story_desc")))) {state = 43; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "story_desc")));
				return false;
			}
			private boolean moveNext_43() throws Exception {
				state = 44;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_44() throws Exception {
				state = 46;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "product_desc")))) {state = 45; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "product_desc")));
				return false;
			}
			private boolean moveNext_45() throws Exception {
				state = 46;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_46() throws Exception {
				state = 48;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "foot_fibre_ref")))) {state = 47; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "foot_fibre_ref")));
				return false;
			}
			private boolean moveNext_47() throws Exception {
				state = 48;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_48() throws Exception {
				state = 50;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "batch_date")))) {state = 49; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "batch_date")));
				return false;
			}
			private boolean moveNext_49() throws Exception {
				state = 50;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_50() throws Exception {
				state = 52;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "batch_time")))) {state = 51; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "batch_time")));
				return false;
			}
			private boolean moveNext_51() throws Exception {
				state = 52;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_52() throws Exception {
				state = 54;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "record_count")))) {state = 53; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "record_count")));
				return false;
			}
			private boolean moveNext_53() throws Exception {
				state = 54;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_54() throws Exception {
				state = 56;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "job_num")))) {state = 55; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "job_num")));
				return false;
			}
			private boolean moveNext_55() throws Exception {
				state = 56;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_56() throws Exception {
				state = 58;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "file_type")))) {state = 57; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "file_type")));
				return false;
			}
			private boolean moveNext_57() throws Exception {
				state = 58;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_58() throws Exception {
				state = 60;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "rowUpdate")))) {state = 59; return false; }
				com.altova.db.Dbs.bindParameter_DateTime(var3_NewQuery, (com.altova.types.DateTime)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "rowUpdate")));
				return false;
			}
			private boolean moveNext_59() throws Exception {
				state = 60;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_60() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.notEqual(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.db.Dbs.executeNonReader(var3_NewQuery)))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(0))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_catalog;
		com.altova.db.Record var2_record;
	
		public seq1_NewQuery(com.altova.db.Catalog var1_catalog, com.altova.db.Record var2_record)
		{
			this.var1_catalog = var1_catalog;
			this.var2_record = var2_record;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_NewQuery closure;
			com.altova.db.Statement var3_NewQuery;
			public Enumerator(seq1_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 33:	if (moveNext_33()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 37:	if (moveNext_37()) return true; break;
					case 38:	if (moveNext_38()) return true; break;
					case 39:	if (moveNext_39()) return true; break;
					case 40:	if (moveNext_40()) return true; break;
					case 41:	if (moveNext_41()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 43:	if (moveNext_43()) return true; break;
					case 44:	if (moveNext_44()) return true; break;
					case 45:	if (moveNext_45()) return true; break;
					case 46:	if (moveNext_46()) return true; break;
					case 47:	if (moveNext_47()) return true; break;
					case 48:	if (moveNext_48()) return true; break;
					case 49:	if (moveNext_49()) return true; break;
					case 50:	if (moveNext_50()) return true; break;
					case 51:	if (moveNext_51()) return true; break;
					case 52:	if (moveNext_52()) return true; break;
					case 53:	if (moveNext_53()) return true; break;
					case 54:	if (moveNext_54()) return true; break;
					case 55:	if (moveNext_55()) return true; break;
					case 56:	if (moveNext_56()) return true; break;
					case 57:	if (moveNext_57()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 3;				
				var3_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_catalog, 2);
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "action")))) {state = 2; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "action")));
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "contract_status")))) {state = 4; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "contract_status")));
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "colour_code")))) {state = 6; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "colour_code")));
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "colour_desc")))) {state = 8; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "colour_desc")));
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 11;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "prim_size")))) {state = 10; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "prim_size")));
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 11;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 13;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "sec_size")))) {state = 12; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "sec_size")));
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 13;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 15;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "price")))) {state = 14; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "price")));
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 15;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 17;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "series")))) {state = 16; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "series")));
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 17;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 19;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "country")))) {state = 18; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "country")));
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 19;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_19() throws Exception {
				state = 21;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "care_label_ref")))) {state = 20; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "care_label_ref")));
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 21;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 23;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "multi_part_set")))) {state = 22; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "multi_part_set")));
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 23;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 25;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "fibre_content")))) {state = 24; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "fibre_content")));
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 25;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 27;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "story_desc")))) {state = 26; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "story_desc")));
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 27;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_27() throws Exception {
				state = 29;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "product_desc")))) {state = 28; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "product_desc")));
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 29;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_29() throws Exception {
				state = 31;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "foot_fibre_ref")))) {state = 30; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "foot_fibre_ref")));
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 31;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_31() throws Exception {
				state = 33;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "batch_date")))) {state = 32; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "batch_date")));
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 33;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_33() throws Exception {
				state = 35;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "batch_time")))) {state = 34; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "batch_time")));
				return false;
			}
			private boolean moveNext_34() throws Exception {
				state = 35;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_35() throws Exception {
				state = 37;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "record_count")))) {state = 36; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "record_count")));
				return false;
			}
			private boolean moveNext_36() throws Exception {
				state = 37;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_37() throws Exception {
				state = 39;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "job_num")))) {state = 38; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "job_num")));
				return false;
			}
			private boolean moveNext_38() throws Exception {
				state = 39;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_39() throws Exception {
				state = 41;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "rowUpdate")))) {state = 40; return false; }
				com.altova.db.Dbs.bindParameter_DateTime(var3_NewQuery, (com.altova.types.DateTime)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "rowUpdate")));
				return false;
			}
			private boolean moveNext_40() throws Exception {
				state = 41;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_41() throws Exception {
				state = 43;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "contract")))) {state = 42; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "contract")));
				return false;
			}
			private boolean moveNext_42() throws Exception {
				state = 43;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_43() throws Exception {
				state = 45;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "upc")))) {state = 44; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "upc")));
				return false;
			}
			private boolean moveNext_44() throws Exception {
				state = 45;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_45() throws Exception {
				state = 47;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "packing_ref")))) {state = 46; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "packing_ref")));
				return false;
			}
			private boolean moveNext_46() throws Exception {
				state = 47;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_47() throws Exception {
				state = 49;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "season")))) {state = 48; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "season")));
				return false;
			}
			private boolean moveNext_48() throws Exception {
				state = 49;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_49() throws Exception {
				state = 51;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "dept")))) {state = 50; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "dept")));
				return false;
			}
			private boolean moveNext_50() throws Exception {
				state = 51;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_51() throws Exception {
				state = 53;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "stroke_num")))) {state = 52; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "stroke_num")));
				return false;
			}
			private boolean moveNext_52() throws Exception {
				state = 53;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_53() throws Exception {
				state = 55;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "stroke_desc")))) {state = 54; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "stroke_desc")));
				return false;
			}
			private boolean moveNext_54() throws Exception {
				state = 55;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_55() throws Exception {
				state = 57;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "file_type")))) {state = 56; return false; }
				com.altova.db.Dbs.bindParameter_nchar_SQLServer(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "file_type")));
				return false;
			}
			private boolean moveNext_56() throws Exception {
				state = 57;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_57() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.notEqual(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.db.Dbs.executeNonReader(var3_NewQuery)))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(0))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
				
			}

			static void writeDB_MSMS_TXTDATA(com.altova.db.Record parent, 
				com.altova.db.Record record, 
				com.altova.db.Catalog target, 
				com.altova.db.TransactionHelper transactionHelper
				) throws Exception
			{
				target.getConnection().setAutoCommit(true);
				IEnumerable actionSequence = new Action_MSMS_TXTDATA.main(target, 
					record);
				IEnumerator actionSequenceEnum = actionSequence.enumerator();
				actionSequenceEnum.moveNext();
				boolean bProcessChildren = (Boolean) actionSequenceEnum.current();
				
				if (bProcessChildren)
				{					
				}
			}

}
